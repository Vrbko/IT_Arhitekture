openapi: 3.0.1
info:
  title: User Service API
  description: API for managing users, including creating users, retrieving user information, and login functionality.
  version: 1.0.0
servers:
  - url: 'http://localhost:50051'  # This would be the endpoint for gRPC-gateway if set up.
    description: gRPC server (RESTful proxy through gRPC-Gateway)
paths:
  /users:
    post:
      summary: Create a new user
      description: Create a new user with the provided username, email, age, and password.
      operationId: createUser
      requestBody:
        description: User data to create a new user
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                age:
                  type: integer
                  example: 30
                password:
                  type: string
                  example: "securePassword123"
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "john_doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  age:
                    type: integer
                    example: 30
                  message:
                    type: string
                    example: "User created successfully"
        '400':
          description: Bad request, invalid data provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid data"
  /users/{user_id}:
    get:
      summary: Retrieve user information by user ID
      description: Fetch user details by providing their user ID.
      operationId: getUser
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "john_doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  age:
                    type: integer
                    example: 30
                  message:
                    type: string
                    example: "User fetched successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
  /users/login:
    post:
      summary: User login
      description: Log in with a username and password to authenticate the user.
      operationId: loginUser
      requestBody:
        description: User credentials to log in
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  example: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
        '400':
          description: Invalid login credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Incorrect password"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        email:
          type: string
        age:
          type: integer
        password:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserResponse:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        email:
          type: string
        age:
          type: integer
        message:
          type: string
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string